name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install sshd
      run: |
        sudo apt update
        sudo apt install ssh
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Воссоздание .terraformrc
      run: echo "${{ secrets.TERRAFORMRC }}" > ~/.terraformrc

    - name: Воссоздание personal.auto.tfvars
      run: echo "${{ secrets.TFVARS_PERSON }}" | base64 --decode > ./personal.auto.tfvars

    - name: Воссоздание backend.tf
      run: echo "${{ secrets.TF_BACKEND }}" | base64 --decode > ./backend.tf

    - name: Воссоздание ys.key
      run: |
        mkdir -p ~/.config/yandex-cloud
        echo "${{ secrets.YC_KEY }}" | base64 --decode > ~/.config/yandex-cloud/.key.json

    - name: Воссоздание id_rsa
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" | base64 --decode > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        eval $(ssh-agent -s)
        ssh-add ~/.ssh/id_rsa
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.    
    - name: Terraform Init
      run: terraform init

    - name: Terraform validate
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      
    #- name: ls
    #  run: | 
    #    ls -l 
    #    ls -l ansible
    #    ls -l ansible/roles/keep-ha/files/
    #    ls -l ansible/inventory/
    #    ls -l ansible/roles/kuber/files
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: ${{ github.ref_name }} == "main" &&  ${{ github.event_name }} == 'push'
      run: terraform apply -auto-approve -input=false

    - name: ls
      run: | 
        ls -l 
        ls -l ansible
        ls -l ansible/roles/keep-ha/files/
        ls -l ansible/inventory/
        ls -l ansible/roles/kuber/files
        cat ansible/ansible.cfg
